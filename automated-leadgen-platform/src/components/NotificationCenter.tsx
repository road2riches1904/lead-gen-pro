import { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { \n  Bell, \n  CheckCircle, \n  AlertCircle, \n  Info, \n  DollarSign, \n  Users, \n  Target, \n  Zap, \n  X \n} from 'lucide-react';\n\ninterface Notification {\n  id: string;\n  type: 'success' | 'warning' | 'info' | 'error';\n  title: string;\n  message: string;\n  timestamp: Date;\n  action?: {\n    label: string;\n    onClick: () => void;\n  };\n  read: boolean;\n}\n\ninterface NotificationCenterProps {\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function NotificationCenter({ isOpen, onClose }: NotificationCenterProps) {\n  const [notifications, setNotifications] = useState<Notification[]>([\n    {\n      id: '1',\n      type: 'success',\n      title: 'New High-Quality Lead',\n      message: 'Sarah Johnson from TechStart Inc (Score: 92) has been qualified and delivered to SaaS Solutions Corp.',\n      timestamp: new Date(Date.now() - 300000), // 5 minutes ago\n      read: false\n    },\n    {\n      id: '2',\n      type: 'info',\n      title: 'Payment Processed',\n      message: 'Automatic payment of $2,450 received from Marketing Agency Pro for 35 leads delivered.',\n      timestamp: new Date(Date.now() - 900000), // 15 minutes ago\n      read: false\n    },\n    {\n      id: '3',\n      type: 'success',\n      title: 'New Client Onboarded',\n      message: 'FinanceGrow LLC has been automatically onboarded. Campaign setup in progress.',\n      timestamp: new Date(Date.now() - 1800000), // 30 minutes ago\n      read: true\n    },\n    {\n      id: '4',\n      type: 'warning',\n      title: 'LinkedIn Rate Limit',\n      message: 'LinkedIn automation temporarily paused due to rate limiting. Will resume in 2 hours.',\n      timestamp: new Date(Date.now() - 3600000), // 1 hour ago\n      read: true\n    }\n  ]);\n\n  // Simulate real-time notifications\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const notificationTypes = [\n        {\n          type: 'success' as const,\n          titles: [\n            'New Lead Generated',\n            'Lead Qualified',\n            'Payment Received',\n            'Campaign Milestone'\n          ],\n          messages: [\n            'High-quality lead found via LinkedIn automation',\n            'Lead scored 89/100 and automatically qualified',\n            'Client payment processed successfully',\n            'Campaign reached 50% completion rate'\n          ]\n        },\n        {\n          type: 'info' as const,\n          titles: [\n            'System Update',\n            'Data Source Connected',\n            'Enrichment Complete'\n          ],\n          messages: [\n            'Lead enrichment completed for 12 prospects',\n            'ZoomInfo API integration successful',\n            'Company data updated for recent leads'\n          ]\n        },\n        {\n          type: 'warning' as const,\n          titles: [\n            'API Rate Limit',\n            'Low Credit Warning'\n          ],\n          messages: [\n            'Apollo.io rate limit reached, switching to backup source',\n            'Hunter.io credits below 20%, consider upgrading plan'\n          ]\n        }\n      ];\n\n      const randomType = notificationTypes[Math.floor(Math.random() * notificationTypes.length)];\n      const randomTitle = randomType.titles[Math.floor(Math.random() * randomType.titles.length)];\n      const randomMessage = randomType.messages[Math.floor(Math.random() * randomType.messages.length)];\n\n      const newNotification: Notification = {\n        id: Date.now().toString(),\n        type: randomType.type,\n        title: randomTitle,\n        message: randomMessage,\n        timestamp: new Date(),\n        read: false\n      };\n\n      setNotifications(prev => [newNotification, ...prev.slice(0, 19)]); // Keep only 20 notifications\n    }, 45000); // New notification every 45 seconds\n\n    return () => clearInterval(interval);\n  }, []);\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev => \n      prev.map(notif => \n        notif.id === id ? { ...notif, read: true } : notif\n      )\n    );\n  };\n\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notif => ({ ...notif, read: true }))\n    );\n  };\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notif => notif.id !== id));\n  };\n\n  const getIcon = (type: string) => {\n    switch (type) {\n      case 'success': return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\n      case 'warning': return <AlertCircle className=\"w-4 h-4 text-yellow-500\" />;\n      case 'error': return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\n      case 'info': return <Info className=\"w-4 h-4 text-blue-500\" />;\n      default: return <Info className=\"w-4 h-4 text-gray-500\" />;\n    }\n  };\n\n  const unreadCount = notifications.filter(n => !n.read).length;\n\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"fixed inset-0 bg-black/50 z-50 flex items-start justify-end pt-16 pr-4\">\n      <Card className=\"w-96 max-h-[600px] shadow-xl\">\n        <CardHeader className=\"pb-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-2\">\n              <Bell className=\"w-5 h-5\" />\n              <CardTitle>Notifications</CardTitle>\n              {unreadCount > 0 && (\n                <Badge variant=\"destructive\" className=\"ml-2\">\n                  {unreadCount}\n                </Badge>\n              )}\n            </div>\n            <div className=\"flex gap-2\">\n              {unreadCount > 0 && (\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\" \n                  onClick={markAllAsRead}\n                >\n                  Mark all read\n                </Button>\n              )}\n              <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n                <X className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"p-0\">\n          <ScrollArea className=\"h-[500px]\">\n            <div className=\"space-y-1 p-4\">\n              {notifications.length === 0 ? (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  No notifications yet\n                </div>\n              ) : (\n                notifications.map(notification => (\n                  <div\n                    key={notification.id}\n                    className={`p-3 rounded-lg border cursor-pointer transition-colors ${\n                      notification.read \n                        ? 'bg-gray-50 dark:bg-gray-800/50' \n                        : 'bg-white dark:bg-gray-800 border-blue-200 dark:border-blue-800'\n                    }`}\n                    onClick={() => markAsRead(notification.id)}\n                  >\n                    <div className=\"flex items-start gap-3\">\n                      {getIcon(notification.type)}\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between mb-1\">\n                          <h4 className={`text-sm font-medium truncate ${\n                            notification.read ? 'text-gray-600' : 'text-gray-900 dark:text-white'\n                          }`}>\n                            {notification.title}\n                          </h4>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-6 h-6 p-0 opacity-0 group-hover:opacity-100\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              removeNotification(notification.id);\n                            }}\n                          >\n                            <X className=\"w-3 h-3\" />\n                          </Button>\n                        </div>\n                        <p className={`text-xs mb-2 ${\n                          notification.read ? 'text-gray-500' : 'text-gray-700 dark:text-gray-300'\n                        }`}>\n                          {notification.message}\n                        </p>\n                        <div className=\"flex items-center justify-between\">\n                          <span className=\"text-xs text-gray-400\">\n                            {notification.timestamp.toLocaleTimeString()}\n                          </span>\n                          {notification.action && (\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={(e) => {\n                                e.stopPropagation();\n                                notification.action!.onClick();\n                              }}\n                            >\n                              {notification.action.label}\n                            </Button>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                ))\n              )}\n            </div>\n          </ScrollArea>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport function useNotifications() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [unreadCount, setUnreadCount] = useState(3);\n\n  const toggle = () => setIsOpen(!isOpen);\n  const close = () => setIsOpen(false);\n\n  return {\n    isOpen,\n    unreadCount,\n    toggle,\n    close\n  };\n}